:root {
    --color1: rgb(60, 78, 89);
    --color2: rgb(216, 217, 197);
    --color3: rgb(13, 13, 13);
    --color4: rgb(191, 175, 143);
    --color5: rgb(66, 61, 57);
}
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    background: url(../../../ressources/capricorn-.jpg) center/cover;
    height: 100vh;
    font-family: "Trebuchet MS", "Lucida Sans Unicode", "Lucida Grande",
        "Lucida Sans", Arial, sans-serif;
    color: var(--color4);
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
}
.card {
    background: rgba(0, 0, 0, 0.507);
    width: calc(100% - 50px);
    padding: 20px 20px 6px;
    box-shadow: 10px -10px 2px var(--color5);
    border-radius: 15px;
    backdrop-filter: blur(5px);
}
.card:before {
    content: "\2606";
    position: absolute;
    top: 3px;
    right: 20px;
    font-size: 2rem;
}
h1 {
    margin-bottom: 24px;
    position: relative;
}
/* Pour faire un after ou un before il faut deux choses obligatoires: le content (vide ou non) et la position (en absolute) */
h1::after {
    content: "";
    /* A noter: pour la plupart des éléments en absolute on doit mettre une frontière à son parent pour qu'il puisse se positionner en fonction de son parent */
    position: absolute;
    background: var(--color4);
    height: 2px;
    width: 100%;
    bottom: -14px;
    /* Pour centrer l'élément (ici une barre) horizontalement on fait un left de 50% pour le centrer sur son coin gauche+ transform translate de sa taille de -50% pour le centrer en son milieu */
    left: 50%;
    /* Pour animer cette barre pour la faire gonfler au moment de l'animation il faut lui donner un transform translateX(-50%) et une scaleX(0) pour qu'elle ne s'affiche pas */
    transform: translate(-50%) scale(0);
    /* Puis pour faire l'animation on créé un @keyframes identifier. Pour que la barre reste affiché à la fin de l'animation il faut ajouter forwards dans l'animation */
    animation: h1anim 6s ease-in-out forwards;
    /* Pour donner un lieu de départ on ajoute */
    transform-origin: center;
}
@keyframes h1anim {
    100% {
        /* Il est important de retranscire ici le tranlate sinon la propriété transform d'ici va écraser celle qui est dans ke h1after */
        transform: translate(-50%) scaleX(1);
    }
}

.grid-container {
    display: grid;
    grid-template-columns: 20% 80%;
}
.polygon_container {
    /* le drop shadow permet de faire une ombre sur des éléments ayant des formes particulières */
    filter: drop-shadow(-1px 15px 3px var(--color5));
    /* Ceci permet de centrer un élément sur les X et les Y dans un parent en grid. On peut ajouter une position en l'indiquant après le center*/
    place-self: center left;
}
.polygon {
    clip-path: polygon(
        20% 0%,
        80% 0%,
        100% 20%,
        100% 80%,
        80% 100%,
        20% 100%,
        0% 80%,
        0% 20%
    );
    height: 100px;
    background: linear-gradient(135deg, var(--color2) 0%, var(--color4) 100%);
    box-shadow: 2px 2px 2px var(--color4);
    width: 100px;
}
.polygon::after {
    content: "Un texte";
    position: absolute;
    color: var(--color4);
    /* Pour le centrer. Mais attention, il sera centré en fonction de son coin haut gauche */
    top: 50%;
    left: 50%;
    /* Pour le centrer en son centre */
    transform: translate(-50%, -50%) rotate(315deg);
    width: 90px;
    padding: 4px;
    text-align: center;
}
p {
    line-height: 26px;
    margin: 20px 0;
    /* pour limiter le nombre de lignes que l'on souhaite voir apparaître sur le site */
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 4;
    /* pour masquer le reste du texte tant que celu-ci fait plus de 4 lignes */
    overflow: hidden;
    text-align: justify;
}
p::selection {
    /* pour donner un style différent lorsque du texte est sélectionné par l'utilisateur */
    background: var(--color2);
    color: var(--color1);
}
.checkbox-container {
    display: flex;
    /* pour répartir les inputs dans la boîte */
    justify-content: space-around;
    margin: 20px 0 30px;
    /* On ajoute ici la perspective pour l'animation que nous avons mis à l'enfant 4. Elle va de 0 à 1000. Plus le nombre est petit plus la perspective est accentuée et plus le nombre est grand plus elle est faible */
    perspective: 100px;
}
input[type="checkbox"] {
    /* pour faire disparaître le case de sélection */
    display: none;
}
input[type="checkbox"]:checked + label {
    /* si on remplace le + par ~ on agira sur tous les labels suivants. En mettant + on agit sur le label coché */
    /* display: none; */
    background: var(--color4);
    color: var(--color5);
    transform: scale(1.1);
    filter: brightness(120%);
}
label {
    /* pour informer l'utilisateur de la possibilité de cocher une case */
    cursor: pointer;
    border: 1px solid var(--color4);
    background: var(--color5);
    padding: 10px;
    border-radius: 15px;
    /* pour ajouter une animation une fois la case cochée */
    transition: 0.3s;
    /* Pour empêcher l'utilisateur de sélectionner du texte */
    user-select: none;
}
label:first-of-type:hover {
    /* Ici le infinite permet de jouer l'animation tant que l'utilisateur est en hover sur le bouton. Le linear permet de faire en sorte que le mouvement linéaire sans coupure */
    animation: label1 1s infinite linear;
}
@keyframes label1 {
    50% {
        transform: scale(1.2);
    }
    100% {
        transform: scale(1);
    }
}
/* Pour faire une animation en 3d sur le hover */
label:nth-child(4):hover {
    animation: label2 3s infinite linear;
}
/* Pour faire la 3D il ne faut pas oublier de faire de la perspective sur le parent(ici le checkbox container */
@keyframes label2 {
    33% {
        /* ici l'élément se rapproche de nous */
        transform: translateZ(30px);
    }
    66% {
        /* ici l'élément s'éloigne de nous */
        transform: translateZ(-40px);
    }
    100% {
        transform: translateZ(0);
    }
}
.email {
    text-align: center;
    margin-bottom: 20px;
}
.email input {
    padding: 10px;
    border-radius: 15px;
    outline: none;
    /* la border ici doit correspondre à celle qui sera mise que la border du focus, si border il y a, sinon si la border est en none ceci créera une déccalage visible sur le navigateur */
    border: 1px solid transparent;
    transition: 0.3s;
    text-align: center;
    font-size: 1.1rem;
    color: var(--color3);
    background: var(--color5);
    /* Ceci permet de donner une taille dynamique à l'élément sans avoir a utiler le media query */
    min-width: 180px;
    width: 35%;
    max-width: 300px;
}
/* Le focus est le fait que la case soit "occupée" par le cursur */
input[type="text"]:focus {
    background: transparent;
    border: 1px solid var(--color4);
    border-radius: 150px;
}
input[type="text"]::placeholder {
    color: var(--color4);
    font-family: "Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS", sans-serif;
}
button {
    /* Pour indiquer à l'utilisateur que le bouton est cliquable */
    cursor: pointer;
    background: var(--color3);
    color: var(--color4);
    border: none;
    font-size: 1.3rem;
    padding: 10px 20px;
    border-radius: 150px;
    margin: 0 auto;
    display: block;
    /* Ceci est la transition qui agira en entrée et en sortie sur l'élement qui a le hover(button hover). On doit placer la déclaration dans l'élément principal; ici dans le sélecteur bouton */
    transition: 0.1s;
}
button:hover {
    letter-spacing: 3px;
}
button:hover + a,
a:hover {
    /* ici on crée cette déclaration pour que l'effet d'apparition soit effective. Il s'agit en fait de donner une valeur 1 à la propriété opacité  */
    opacity: 1;
    /* En Visibility Visible il n'y aura plus le bug en passant par dessus le lien car il est en visibility hidden dans son a seul */
    visibility: visible;
    /* Et on n'oublie pas non plus de mettre la valeur 0 à la propriété translate */
    transform: translateY(0px);
}
button:active {
    /* Ceci permet à l'utilisateur d'avoir un visuel qui lui confirme que son clique à eu un effet */
    transform: scale(1.2);
    background: var(--color4);
    color: var(--color3);
    border: none;
    border-radius: 150px;
}
a {
    /* Pour personnaliser la couleur du lien */
    color: var(--color4);
    text-align: center;
    display: block;
    font-size: 1.2rem;
    /* Si on ne veut pas que le lien soit souligné il faut ajouter la propriété suivante:text-decoration: none; */

    /* Ici on met l'opacité à 0 si on souhaite faire apparaitre uyn élément au moment où un fait un hover sur le bouton.
    Pour que l'effet de l'apparition soit visible il faut créer un button:hover(voir les réglage dans le sélecteur) */
    opacity: 0;
    /* Pour éviter le bug en pasant par dessu le lien il faut lui donner un visibility hidden ici et dans le a hover il faut lui mettre une Visibility Visible */
    visibility: hidden;
    /* on n'oublie pas cette déclaration pour que le lien descende */
    transform: translateY(20px);
    transition: 0.3s;
    padding: 8px 0;
}
a:visited {
    /* Ceci permet de donner une couleur particulière à un lien qui a été visité(cliqué) */
    color: var(--color3);
}
img {
    height: 10%;
    position: absolute;
    filter: drop-shadow(0px 6px 3px rgba(246, 218, 94, 0.647));
    /* Pour le mettre en arrière plan il faut le mettre en négatif */
    z-index: -1;
    animation: coeur 30s infinite linear;
}
@keyframes coeur {
    0% {
        top: 2%;
        left: 2%;
        transform: rotate(90deg);
    }
    10% {
        top: 6%;
        left: 30%;
        transform: rotate(90deg);
    }
    20% {
        top: 2%;
        left: 60%;
        transform: rotate(90deg);
    }
    30% {
        top: 2%;
        left: 80%;
        transform: rotate(90deg);
    }
    40% {
        top: 20%;
        left: 110%;
        transform: rotate(90deg);
    }
    50% {
        top: 50%;
        left: 80%;
        transform: rotate(90deg);
    }
    60% {
        top: 90%;
        left: 90%;
        transform: rotate(90deg);
    }
    70% {
        top: 110%;
        left: 50%;
        transform: rotate(90deg);
    }
    80% {
        top: 85%;
        left: 30%;
        transform: rotate(90deg);
    }
    90% {
        top: 50%;
        left: 15%;
        transform: rotate(90deg);
    }
    100% {
        top: 2%;
        left: 2%;
        transform: rotate(90deg);
    }
}
